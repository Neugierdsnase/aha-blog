---
import BaseHead from "../components/BaseHead.astro";

type Props = {
	lang: "de" | "en";
	title: string;
	description: string;
	animateName?: boolean;
};

const pages: { label: string; href: string }[] = [
	{ label: "Über mich", href: "/about" },
	{ label: "Jüngst gelesen", href: "/book" },
	{ label: "Jüngst geschrieben", href: "/blog" },
	{ label: "RSS", href: "/rss" },
];

const { lang, title, description } = Astro.props;
---

<!doctype html>
<html lang={lang}>
  <BaseHead title={title} description={description} />

  <body class="text-foreground">
    <div id="body" class="grid grid-cols-12 gap-2 lg:gap-8 w-full">
      <header
        class="flex h-16 desktop:h-24 col-start-1 -col-end-1 grid-cols-sub gap-8 justify-between items-center w-full pl-4 desktop:px-18"
      >
        <div
          class="w-full col-start-1 -col-end-1 pt-6 flex justify-between items-center grow"
        >
          <a
            href="/"
            class="relative col-start-4 col-span-2 overflow-hidden text-foreground"
          >
            <p class="font-galnoy font-bold desktop:text-3xl whitespace-nowrap">
              Konstantin Kovar
            </p>
          </a>
          <button
            id="mobile-menu-toggle-button"
            class="desktop:hidden scale-25 desktop:scale-50"
          >
            <svg class="size-[66px]">
              <path
                id="path1"
                d="M 3,3 L 63,3"
                stroke-linecap="round"
                class="stroke-foreground stroke-6"></path>
              <path
                id="path2"
                d="M 3,33 L 63,33"
                stroke-linecap="round"
                class="stroke-foreground stroke-6"></path>
              <path
                id="path3"
                d="M 3,63 L 63,63"
                stroke-linecap="round"
                class="stroke-foreground stroke-6"></path>
            </svg>
          </button>
        </div>
        <nav class="grow absolute desktop:static inset-0 top-16 desktop:top-24">
          <ul
            class="flex justify-center items-center flex-col desktop:gap-8 desktop:flex-row"
          >
            {
              pages.map(({ label, href }) => (
                <li class="desktop:w-auto whitespace-nowrap py-4 desktop:p-0 flex justify-center bg-background w-full items-center border-foreground-subtle border-b-[0.5px] z-10 h-0 desktop:h-auto overflow-clip desktop:overflow-ellipsis opacity-0 desktop:opacity-100 foldable">
                  <a href={href}>{label}</a>
                </li>
              ))
            }
          </ul>
        </nav>
      </header>
      <aside><slot name="aside" /></aside>
      <main
        class="grid grid-cols-subgrid grid-rows-auto col-start-1 desktop:col-start-4 -col-end-1"
      >
        <slot />
      </main>
    </div>

    <script>
      import { stagger, createTimeline } from "animejs";

      const foldables = document.querySelectorAll(".foldable");
      const amountOfFoldables = foldables.length;

      const timeline = createTimeline({
        alternate: true,
        autoplay: false,
        playbackEase: "out",
      });

      timeline.add(
        foldables,
        {
          translateY: { from: -stagger(24), to: 0 },
          opacity: 1,
          height: "48px",
          delay: stagger(500 / amountOfFoldables),
          duration: 500 / amountOfFoldables,
        },
        70,
      );

      timeline.add(
        "#path3",
        {
          d: "M 33,3 L 33,63",
          duration: 500,
        },
        100,
      );

      timeline.add(
        "#path1",
        {
          d: "M 33,63 L 3,33",
          duration: 500,
        },
        100,
      );

      timeline.add(
        "#path2",
        {
          d: "M 33,63 L 63,33",
          duration: 500,
        },
        200,
      );

      timeline.add(
        "button",
        {
          rotate: "-180deg",
          duration: 400,
          ease: "out",
        },
        0,
      );

      let isMobileMenuOpen = false;

      document
        .querySelector("#mobile-menu-toggle-button")
        ?.addEventListener("click", () => {
          if (isMobileMenuOpen) {
            timeline.reverse();
          } else {
            timeline.play();
          }
          isMobileMenuOpen = !isMobileMenuOpen;
        });
    </script>

    <script
      is:inline
      data-goatcounter="https://konstantin.goatcounter.com/count"
      async
      src="//gc.zgo.at/count.js"></script>
  </body>
</html>
