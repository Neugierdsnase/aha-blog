<details
  class="relative bg-background text-foreground-subtle not-open:pb-2 max-w-[69ch] border rounded [&>.details-content]:transition-all open:[&>summary]:border-b after:border-t after:rounded-b after:bg-background after:absolute after:bottom-0 after:left-0 after:right-0 after:h-2"
>
  <summary class="cursor-pointer marker:text-background">
    <svg
      height="6"
      width="10"
      xmlns="http://www.w3.org/2000/svg"
      class="inline mr-2 -translate-y-0.5"
    >
      <polygon points="0,0 10,3 0,6" class="fill-foreground origin-center"
      ></polygon>
    </svg>
    Details</summary
  >
  <div class="details-content p-2 pb-4 bg-surface rounded-b text-foreground">
    <slot />
  </div>
</details>

<script>
  import { animate, JSAnimation } from "animejs";

  class Accordion {
    details: HTMLDetailsElement;
    summary: HTMLElement;
    content: HTMLElement;
    animation: JSAnimation | null = null;
    isClosing: boolean = false;
    isExpanding: boolean = false;

    constructor(el: HTMLDetailsElement) {
      this.details = el;
      this.summary = el.querySelector("summary")!;
      this.content = el.querySelector(".details-content")!;
      this.summary.addEventListener("click", (e) => this.onClick(e));
    }

    // Function called when user clicks on the summary
    onClick(e: Event) {
      e.preventDefault();

      this.details.style.overflow = "hidden";

      if (this.isClosing || !this.details.open) {
        this.open();
        // Check if the element is being openned or is already open
      } else if (this.isExpanding || this.details.open) {
        this.shrink();
      }
    }

    // Function called to close the content with an animation
    shrink() {
      // Set the element as "being closed"
      this.isClosing = true;

      // Store the current height of the element
      const startHeight = `${this.details.offsetHeight}px`;
      // Calculate the height of the summary plus the height of the pseudo element
      const endHeight = `${this.summary.offsetHeight + 8}px`;

      // If there is already an animation running
      if (this.animation) {
        // Cancel the current animation
        this.animation.cancel();
      }

      // Start a WAAPI animation
      this.animation = animate([this.details, "polygon"], {
        // Set the keyframes from the startHeight to endHeight
        height: [startHeight, endHeight],
        duration: 400,
        easing: "out",
        points: "0,0 10,3 0,6",
      });

      // When the animation is complete, call onAnimationFinish()
      this.animation.onComplete = () => this.onAnimationFinish(false);
      // If the animation is cancelled, isClosing variable is set to false
      this.animation.onPause = () => (this.isClosing = false);
    }

    // Function called to open the element after click
    open() {
      // Apply a fixed height on the element
      this.details.style.height = `${this.details.offsetHeight}px`;
      // Force the [open] attribute on the details element
      this.details.open = true;
      // Wait for the next frame to call the expand function
      window.requestAnimationFrame(() => this.expand());
    }

    // Function called to expand the content with an animation
    expand() {
      // Set the element as "being expanding"
      this.isExpanding = true;
      // Get the current fixed height of the element
      const startHeight = `${this.details.offsetHeight}px`;
      // Calculate the open height of the element (summary height + content height)
      const endHeight = `${this.summary.offsetHeight + this.content.offsetHeight}px`;

      // If there is already an animation running
      if (this.animation) {
        // Cancel the current animation
        this.animation.cancel();
      }

      this.animation = animate([this.details, "polygon"], {
        // Set the keyframes from the startHeight to endHeight
        height: [startHeight, endHeight],
        // If the duration is too slow of fast, you can change it here
        duration: 400,
        // You can also change the ease of the animation
        easing: "out",
        points: "0,0 10,0 5,6",
      });
      // When the animation is complete, call onAnimationFinish()
      this.animation.onComplete = () => this.onAnimationFinish(true);
      // If the animation is cancelled, isExpanding variable is set to false
      this.animation.onPause = () => (this.isExpanding = false);
    }

    // Callback when the shrink or expand animations are done
    private onAnimationFinish(open: boolean) {
      // Set the open attribute based on the parameter
      this.details.open = open;
      // Clear the stored animation
      this.animation = null;
      // Reset isClosing & isExpanding
      this.isClosing = false;
      this.isExpanding = false;
      // Remove the overflow hidden and the fixed height
      this.details.style.height = this.details.style.overflow = "";
    }
  }

  new Accordion(document.querySelector("details")!);
</script>
